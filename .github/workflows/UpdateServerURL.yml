name: Update Yostar Server URL

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:
permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          echo "Dependencies installed with exit code $?"

      - name: Update all regions
        continue-on-error: true  # 关键修复：即使某个区域失败也继续执行
        run: |
          set +e  # 禁用错误退出
          echo "=== Starting JP Update ==="
          python -m regions.JP.update_urls ba.env server-info.json
          echo "JP update exited with $?"
          
          echo "=== Starting CN Update ==="
          python -m regions.CN.CN_run ba.env server-info.json
          echo "CN update exited with $?"
          
          echo "=== Starting GL Update ==="
          python -m regions.GL.GL_run ba.env server-info.json
          echo "GL update exited with $?"
          set -e

      - name: Analyze changes
        id: analyze
        continue-on-error: true
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add ba.env || echo "git add failed but continuing..."

          if git diff --cached --quiet; then
            echo "::set-output name=changed::false"
            echo "::warning::No changes detected"
            exit 0
          fi

          # 改进的行号检测方法
          changed_lines=$(git diff --cached -U0 ba.env | \
                         grep -E '^\+[^\+]' | \
                         cut -d: -f1 | \
                         sort -nu)
          
          echo "::group::Changed Lines Analysis"
          echo "Detected changed lines: $changed_lines"
          echo "Full diff:"
          git diff --cached -U0 ba.env
          echo "::endgroup::"

          # 区域行号映射
          declare -A region_map=(
            ["1"]="jp" ["2"]="jp" ["3"]="jp" ["4"]="jp"
            ["5"]="cn" ["6"]="cn" ["7"]="cn" ["8"]="cn" 
            ["9"]="gl" ["10"]="gl" ["11"]="gl" ["12"]="gl"
          )

          detected_regions=()
          for line in $changed_lines; do
            region=${region_map[$line]}
            if [ -n "$region" ]; then
              echo "Line $line changed → $region region"
              detected_regions+=($region)
            else
              echo "Line $line changed → Not in target regions"
            fi
          done

          # 去重并排序
          unique_regions=($(printf "%s\n" "${detected_regions[@]}" | sort -u))
          
          if [ ${#unique_regions[@]} -eq 0 ]; then
            echo "::set-output name=changed::false"
            echo "::warning::No target regions changed"
          else
            message=$(IFS=,; echo "${unique_regions[*]}")
            echo "::set-output name=changed::true"
            echo "::set-output name=regions::$message"
            echo "::notice::Target regions changed: $message"
          fi

      - name: Commit changes
        if: steps.analyze.outputs.changed == 'true'
        run: |
          git commit -m "Auto-update: ${{ steps.analyze.outputs.regions }}"
          git push origin HEAD
          echo "Commit pushed with exit code $?"

      - name: Trigger deployment
        if: steps.analyze.outputs.changed == 'true'
        env:
          REGIONS: ${{ steps.analyze.outputs.regions }}
        run: |
          echo "::group::Triggering deployment for $REGIONS"
          curl -sS -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/dispatches" \
            -d '{
              "event_type": "run-deployment",
              "client_payload": {
                "regions": "'$REGIONS'",
                "source": "auto-updater",
                "timestamp": "'$(date -u +"%FT%TZ")'"
              }
            }'
          echo "Curl exit code: $?"
          echo "::endgroup::"
          echo "Deployment triggered successfully"
