name: 更新BA服务器URL

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:
permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码库
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 2

      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: 安装依赖
        run: |
          pip install -r requirements.txt
          echo "依赖安装完成，退出代码 $?"

      - name: 更新URL
        continue-on-error: true
        run: |
          set +e
          echo "=== 开始更新日服(JP) ==="
          python -m regions.JP.update_urls ba.env server-info.json
          echo "日服更新完成，退出代码 $?"
 
          echo "=== 开始更新国服(CN) ==="
          python -m regions.CN.CN_run ba.env server-info.json
          echo "国服更新完成，退出代码 $?"
          
          echo "=== 开始更新国际服(GL) ==="
          python -m regions.GL.GL_run ba.env server-info.json
          echo "国际服更新完成，退出代码 $?"
          set -e

      - name: 分析变更
        id: analyze_changes
        continue-on-error: true
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add ba.env || echo "git add 失败但继续执行..."

          if git diff --cached --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "::warning::未检测到变更"
            exit 0
          fi

          # 改进的行号检测方法
          changed_lines=$(git diff --cached -U0 ba.env | \
                         grep -E '^\+[^\+]' | \
                         cut -d: -f1 | \
                         sort -nu)
          
          echo "::group::变更行分析"
          echo "检测到变更行: $changed_lines"
          echo "完整差异:"
          git diff --cached -U0 ba.env
          echo "::endgroup::"

          # 区域前缀映射
          declare -A region_map=(
            ["BA_SERVER_URL"]="jp"
            ["ADDRESSABLE_CATALOG_URL"]="jp"
            ["BA_VERSION_CODE"]="jp"
            ["BA_VERSION_NAME"]="jp"
            ["BA_SERVER_URL_CN"]="cn"
            ["ADDRESSABLE_CATALOG_URL_CN"]="cn"
            ["BA_VERSION_CODE_CN"]="cn"
            ["BA_VERSION_NAME_CN"]="cn"
            ["BA_SERVER_URL_GL"]="gl"
            ["ADDRESSABLE_CATALOG_URL_GL"]="gl"
            ["BA_VERSION_CODE_GL"]="gl"
            ["BA_VERSION_NAME_GL"]="gl"
          )

          detected_regions=()
          while IFS= read -r line; do
            for prefix in "${!region_map[@]}"; do
              if [[ "$line" == *"$prefix"* ]]; then
                region=${region_map[$prefix]}
                echo "行 $line 变更 → $region 区域"
                detected_regions+=($region)
                break
              fi
            done
          done < <(git diff --cached -U0 ba.env | grep -E '^\+[^\+]')

          # 去重并排序
          unique_regions=($(printf "%s\n" "${detected_regions[@]}" | sort -u))
          
          if [ ${#unique_regions[@]} -eq 0 ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "::warning::目标区域无变更"
          else
            message=$(IFS=,; echo "${unique_regions[*]}")
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "regions=$message" >> $GITHUB_OUTPUT
            echo "::notice::目标区域变更: $message"
          fi

      - name: 提交变更
        if: steps.analyze_changes.outputs.changed == 'true'
        run: |
          git commit -m "自动更新: ${{ steps.analyze_changes.outputs.regions }}"
          git push origin HEAD
          echo "提交完成，退出代码 $?"

      - name: 触发部署
        if: steps.analyze_changes.outputs.changed == 'true'
        env:
          REGIONS: ${{ steps.analyze_changes.outputs.regions }}
        run: |
          echo "::group::正在为 $REGIONS 触发部署"
          curl -sS -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/dispatches" \
            -d '{
              "event_type": "run-deployment",
              "client_payload": {
                "regions": "'$REGIONS'",
                "source": "auto-updater",
                "timestamp": "'$(date -u +"%FT%TZ")'"
              }
            }'
          echo "Curl 退出代码: $?"
          echo "::endgroup::"
          echo "部署触发成功"
